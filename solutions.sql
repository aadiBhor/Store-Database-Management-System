-- 3. Functional Requirements (Task to do): 
use project_store_db;

-- 3.1 Sales Analysis 
-- • Calculate total revenue generated by each store.
select S.store_id,S.store_name,sum(OI.quantity * OI.list_price) as Total_revenue
from stores S 
left join orders O
on S.store_id = O.store_id
right join order_items OI
on O.order_id = OI.order_id 
group by S.store_id,S.store_name;

-- • Identify top 5 best-selling products.
select  P.product_id,P.product_name, sum(OI.quantity) as total_orders
from products P
inner join order_items OI
on P.product_id = OI.product_id
group by product_id 
order by total_orders desc limit 5;

-- • Calculate monthly sales trends to observe seasonality and growth. 
SELECT 
    DATE_FORMAT(O.order_date, '%Y-%m-01') AS month,
    SUM(OI.list_price * OI.quantity) AS monthly_sales
FROM  orders O
JOIN order_items OI 
ON O.order_id = OI.order_id
GROUP BY month
ORDER BY month;

-- • Identify Top-Selling Product per Category 
with product as (
SELECT C.category_name, P.product_id, P.product_name, SUM(OI.quantity) AS total_quantity,
    row_number() over(partition by C.category_name order by SUM(OI.quantity) desc) as rk 
    from categories C
    join products P 
	on C.category_id = P.category_id
	join order_items OI
	on P.product_id = OI.product_id
    group by C.category_name,P.product_id,P.product_name
    order by total_quantity desc)
    select * from product 
    where rk=1;  

-- • List of Products with Running Total of Sales 
SELECT 
    P.product_id,
    P.product_name,
    O.order_date,
    OI.quantity * OI.list_price,
    SUM(OI.quantity * OI.list_price) OVER (
        PARTITION BY P.product_id 
        ORDER BY O.order_date
        ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
    ) AS running_total
FROM  products P
JOIN  order_items OI ON P.product_id = OI.product_id
JOIN  orders O ON 	OI.order_id = O.order_id;

-- 3.2 Customer Analysis 
-- • Identify customers with the highest purchases. 
with highest_purchases as (
select C.customer_id,C.first_name,C.last_name,sum(OI.quantity) as total_purcheses
from customers C
join orders O
on C.customer_id = O.customer_id
join order_items OI 
on OI.order_id = O.order_id
group by C.customer_id,C.first_name,C.last_name
) 
select * from highest_purchases
where total_purcheses = (
  SELECT MAX(total_purcheses) FROM highest_purchases);

-- • Find customers who have not placed any orders. 
select C.customer_id,C.first_name,C.last_name
from customers C 
left join orders O 
on C.customer_id = O.customer_id
where  O.customer_id is null ;

-- • Identify customers who have placed at least 3 orders and spent more than $ 25,000. 
select  C.customer_id,C.first_name,C.last_name , sum(OI.quantity * OI.list_price) as total_spent , count(distinct O.order_id) as total_palced_count
from customers C 
join orders O 
on C.customer_id = O.customer_id
join order_items OI 
on O.order_id = OI.order_id
group by C.customer_id,C.first_name,C.last_name
having total_spent > 25000 and total_palced_count >= 3;


-- 3.3 Inventory Management 
-- • Identify low-stock products (below 50 items in inventory). 
select P.product_id ,P.product_name, sum(S.quantity) as total_quantity_by_product
from products P
left join stocks S
on P.product_id = S.product_id
group by P.product_id ,P.product_name
having  sum(S.quantity) <= 50;

-- 3.4 Employee Performance Analysis 
-- • Identify the top 5 employees based on order transactions handled. 
select S.staff_id,S.firt_name,S.last_name, count(O.order_id) as total_quantity_by_product
from orders O
left join staffs S
on O.staff_id = S.staff_id
group by S.staff_id,S.firt_name,S.last_name
order by total_quantity_by_product desc limit 5;

-- • Identify staff members with the highest number of orders processed. 
select S.staff_id,S.firt_name,S.last_name, count(O.order_id) as orders_processed
from orders O
left join staffs S
on O.staff_id = S.staff_id
group by S.staff_id,S.firt_name,S.last_name
order by orders_processed desc ;

-- • Rank Staff Based on Revenue Generated 
with Revenue_Generated  as (
select S.staff_id,S.firt_name,S.last_name, sum(OI.quantity * OI.list_price) as total_revenue 
from staffs S
left join orders O 
on S.staff_id= O.staff_id
inner join order_items OI 
on O.order_id = OI.order_id 
group by S.staff_id,S.firt_name,S.last_name
)
select *,dense_rank() over(order by total_revenue desc) as rk from Revenue_Generated ;


-- 3.5 Advanced Reporting 
-- • Rank products by sales volume. 
with ranked as (
select P.product_id , P.product_name , sum(OI.quantity) as total_sales_volume 
from order_items OI
join products P
on OI.product_id = P.product_id 
group by P.product_id , P.product_name
) 
select *,dense_rank() over(order by total_sales_volume desc) as rk from ranked ;

-- • Compare Monthly Sales with Previous Month. 
with Previous_Month as (
select 
date_format(O.order_date,'%Y-%m-01') as months,
sum(OI.quantity * OI.list_price *(1-OI.discount)) as total_sales
from orders O
join order_items OI 
on O.order_id = OI.order_id
group by months
)
select *,lag(total_sales) over(order by months) as previous_month_sales,
total_sales-lag(total_sales) over(order by months) as diffrence
from Previous_Month;

-- • Assign Row Number to Orders by Each Customer.
SELECT customer_id,order_id,order_date,
    ROW_NUMBER() OVER (PARTITION BY customer_id ORDER BY order_date) AS order_rank
FROM orders; 